// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b8hRtVZwnsxZ7ZEtnDCx5m
// Component: e-_b4LABcE2R
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Todo from "../../Todo"; // plasmic-import: vPGSXFymdT/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: b8hRtVZwnsxZ7ZEtnDCx5m/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: e-_b4LABcE2R/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  _?: p.Flex<"div">;
  text?: p.Flex<"div">;
  itertodos?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  frame5?: p.Flex<"div">;
  editableonKeypressonInputChange?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"_"}
            data-plasmic-override={overrides._}
            hasGap={true}
            className={classNames(projectcss.all, sty._)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Figlit Todo"}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"itertodos"}
              data-plasmic-override={overrides.itertodos}
              hasGap={true}
              className={classNames(projectcss.all, sty.itertodos)}
            >
              <Todo
                className={classNames("__wab_instance", sty.todo___5Yrmf)}
              />

              <Todo className={classNames("__wab_instance", sty.todo__wNc6)} />
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame6"}
              data-plasmic-override={overrides.frame6}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame6)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame5"}
                data-plasmic-override={overrides.frame5}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame5)}
              >
                <div
                  data-plasmic-name={"editableonKeypressonInputChange"}
                  data-plasmic-override={
                    overrides.editableonKeypressonInputChange
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.editableonKeypressonInputChange
                  )}
                >
                  {"What you gonna to next?"}
                </div>
              </p.Stack>

              <p.Stack
                as={p.PlasmicImg}
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                hasGap={true}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"31px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"31px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/blank_project_mobile_first/images/framesvg.svg",
                  fullWidth: 31,
                  fullHeight: 31,
                  aspectRatio: 1
                }}
              />
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "_",
    "text",
    "itertodos",
    "frame6",
    "frame5",
    "editableonKeypressonInputChange",
    "img"
  ],
  _: [
    "_",
    "text",
    "itertodos",
    "frame6",
    "frame5",
    "editableonKeypressonInputChange",
    "img"
  ],
  text: ["text"],
  itertodos: ["itertodos"],
  frame6: ["frame6", "frame5", "editableonKeypressonInputChange", "img"],
  frame5: ["frame5", "editableonKeypressonInputChange"],
  editableonKeypressonInputChange: ["editableonKeypressonInputChange"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  _: "div";
  text: "div";
  itertodos: "div";
  frame6: "div";
  frame5: "div";
  editableonKeypressonInputChange: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    _: makeNodeComponent("_"),
    text: makeNodeComponent("text"),
    itertodos: makeNodeComponent("itertodos"),
    frame6: makeNodeComponent("frame6"),
    frame5: makeNodeComponent("frame5"),
    editableonKeypressonInputChange: makeNodeComponent(
      "editableonKeypressonInputChange"
    ),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
